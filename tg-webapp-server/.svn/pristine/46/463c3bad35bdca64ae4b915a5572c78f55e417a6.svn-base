<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.plou.web.system.baseMessage.unit.dao.UnitMapper">
  <resultMap id="BaseResultMap" type="cn.plou.web.system.baseMessage.unit.entity.Unit">
    <id column="unit_id" jdbcType="VARCHAR" property="unitId" />
    <id column="rowno" jdbcType="VARCHAR" property="rowno" />
    <result column="building_id" jdbcType="VARCHAR" property="buildingId" />
    <result column="unit_name" jdbcType="VARCHAR" property="unitName" />
    <result column="building_area" jdbcType="DECIMAL" property="buildingArea" />
    <result column="diameter" jdbcType="VARCHAR" property="diameter" />
    <result column="control_type" jdbcType="VARCHAR" property="controlType" />
    <result column="floor_num" jdbcType="VARCHAR" property="floorNum" />
    <result column="floor_house" jdbcType="DECIMAL" property="floorHouse" />
    <result column="heating_form" jdbcType="VARCHAR" property="heatingForm" />
    <result column="has_build_meter" jdbcType="VARCHAR" property="hasBuildMeter" />
    <result column="has_balance_valve" jdbcType="VARCHAR" property="hasBalanceValve" />
    <result column="company_id" jdbcType="VARCHAR" property="companyId" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="notes" jdbcType="VARCHAR" property="notes" />
    <result column="memo1" jdbcType="VARCHAR" property="memo1" />
    <result column="memo2" jdbcType="VARCHAR" property="memo2" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="create_user" jdbcType="VARCHAR" property="createUser" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="update_user" jdbcType="VARCHAR" property="updateUser" />
    <result column="water_control_type" jdbcType="VARCHAR" property="waterControlType" />
    <result column="water_has_build_meter" jdbcType="VARCHAR" property="waterHasBuildMeter" />
    <result column="index" jdbcType="INTEGER" property="index" />
    <result column="isvalid" jdbcType="INTEGER" property="isvalid" />
  </resultMap>
  <resultMap id="InfoMap" type="cn.plou.web.system.baseMessage.unit.vo.UnitInfo">
    <id column="unit_id" jdbcType="VARCHAR" property="unitId" />
    <id column="rowno" jdbcType="VARCHAR" property="rowno" />
    <result column="building_id" jdbcType="VARCHAR" property="buildingId" />
    <result column="buildingName" jdbcType="VARCHAR" property="buildingName"/>
    <result column="unitName" jdbcType="VARCHAR" property="unitName" />
    <result column="buildingArea" jdbcType="DECIMAL" property="buildingArea" />
    <result column="diameter" jdbcType="VARCHAR" property="diameter" />
    <result column="diameterName" jdbcType="VARCHAR" property="diameterName" />
    <result column="controlType" jdbcType="VARCHAR" property="controlType" />
    <result column="controlTypeName" jdbcType="VARCHAR" property="controlTypeName" />
    <result column="floorNum" jdbcType="VARCHAR" property="floorNum" />
    <result column="floorHouse" jdbcType="DECIMAL" property="floorHouse" />
    <result column="heatingForm" jdbcType="VARCHAR" property="heatingForm" />
    <result column="heatingFormName" jdbcType="VARCHAR" property="heatingFormName" />
    <result column="hasBuildMeter" jdbcType="VARCHAR" property="hasBuildMeter" />
    <result column="hasBuildMeterName" jdbcType="VARCHAR" property="hasBuildMeterName" />
    <result column="hasBalanceValve" jdbcType="VARCHAR" property="hasBalanceValve" />
    <result column="hasBalanceValveName" jdbcType="VARCHAR" property="hasBalanceValveName" />
    <result column="company_id" jdbcType="VARCHAR" property="companyId" />
    <result column="companyName" jdbcType="VARCHAR" property="companyName"/>
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="notes" jdbcType="VARCHAR" property="notes" />
    <result column="memo1" jdbcType="VARCHAR" property="memo1" />
    <result column="memo2" jdbcType="VARCHAR" property="memo2" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="create_user" jdbcType="VARCHAR" property="createUser" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="update_user" jdbcType="VARCHAR" property="updateUser" />
    <result column="waterControlType" jdbcType="VARCHAR" property="waterControlType" />
    <result column="waterControlTypeName" jdbcType="VARCHAR" property="waterControlTypeName" />
    <result column="waterHasBuildMeter" jdbcType="VARCHAR" property="waterHasBuildMeter" />
    <result column="wateHasBuildMeterName" jdbcType="VARCHAR" property="waterHasBuildMeterName" />
    <result column="index" jdbcType="INTEGER" property="index" />
    <result column="isvalid" jdbcType="INTEGER" property="isvalid" />
  </resultMap>
  <sql id="Base_Column_List">
    unit_id, rowno, building_id, unit_name, building_area, diameter, control_type, floor_num, 
    floor_house, heating_form, has_build_meter, has_balance_valve, company_id, address, 
    notes, memo1, memo2, create_date, create_user, update_date, update_user, water_control_type, 
    water_has_build_meter, `index`, isvalid
  </sql>

  <sql id="Useful_List">
    unit_id, rowno, building_id, unit_name, building_area, diameter, control_type, floor_num,
    floor_house, company_id, address, notes,`index`
  </sql>

  <select id="selectUnitTree" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    unit_id,unit_name,floor_num
    from unit_info
    where building_id = #{buildingId,jdbcType=VARCHAR}
  </select>

  <select id="selectUnitByName" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Useful_List" />
    from unit_info
    where substring(unit_id,1,13)=#{buildingId} and unit_name = #{unitName}
  </select>

  <select id="selectAllUnitUnique" resultType="cn.plou.web.system.baseMessage.unit.vo.UnitUnique">
    select unit_name,building_id
    from unit_info
    limit 0,10000
  </select>

  <select id="selectAllUnitIds" parameterType="java.lang.String" resultType="java.lang.String">
    select
    unit_id
    from unit_info
    where building_id = #{buildingNo,jdbcType=VARCHAR}
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Useful_List" />
    from unit_info
    where unit_id = #{unitId,jdbcType=VARCHAR}
  </select>

  <select id="selectAllUnitNoParam" parameterType="map" resultMap="InfoMap">
    select
    u.unit_id, u.rowno, u.building_id, u.unit_name, u.building_area, u.diameter, u.control_type, u.floor_num,
    u.floor_house, u.company_id, u.address, u.notes,u.`index`,b.building_name,c.company_name
    from unit_info u
    left JOIN build_info b ON u.building_id = b.building_no
    left JOIN company_info c ON u.company_id = c.company_id
      <if test="unitVo.unitName != null">
        and u.unit_name = #{unitVo.unitName,jdbcType=VARCHAR}
      </if>
      <if test="unitVo.buildingArea != null">
        and u.building_area = #{unitVo.buildingArea,jdbcType=DECIMAL}
      </if>
      <if test="unitVo.controlType != null">
        and u.control_type = #{unitVo.controlType,jdbcType=VARCHAR}
      </if>
      <if test="unitVo.heatingForm != null">
        and u.heating_form = #{unitVo.heatingForm,jdbcType=VARCHAR}
      </if>
      <if test="unitVo.companyId != null">
        and u.company_id = #{unitVo.companyId,jdbcType=VARCHAR}
      </if>
    <if test="sortby!=null">
      order by ${sortby}
    </if>
    <if test="order!=null">
      ${order}
    </if>
  </select>

  <select id="selectAllUnit" parameterType="cn.plou.web.system.baseMessage.unit.vo.UnitSelectInfo" resultMap="InfoMap">
    select
    u.unit_id, u.rowno, u.building_id,
    u.unit_name unitName, u.building_area buildingArea, u.diameter,u.control_type controlType,u.heating_form heatingForm,
    u.floor_house floorHouse, u.company_id, u.address, u.notes,u.`index`,b.building_name buildingName,
    c.company_name companyName,u.floor_num floorNum,u.has_build_meter hasBuildMeter,u.has_balance_valve hasBalanceValve,
    u.water_control_type waterControlType,u.water_has_build_meter waterHasBuildMeterName
    from unit_info u
    left JOIN build_info b ON u.building_id = b.building_no
    left JOIN company_info c ON u.company_id = c.company_id

    <if test="buildingIds != null">
      <if test="buildingIds.size()!=0">
        where u.unit_id is not null
        and u.building_id in
        <foreach collection="buildingIds" item="item" open="(" separator="," close=")">
          #{item}
        </foreach>
        <if test="unitVo != null">
          <if test="unitVo.unitName != null">
            and u.unit_name LIKE concat('%',#{unitVo.unitName},'%')
          </if>
          <if test="unitVo.buildingArea != null">
            and u.building_area = #{unitVo.buildingArea,jdbcType=DECIMAL}
          </if>
          <if test="unitVo.buildingId != null">
            and u.building_id = #{unitVo.buildingId}
          </if>
          <if test="unitVo.controlType != null">
            and u.control_type = #{unitVo.controlType,jdbcType=VARCHAR}
          </if>
          <if test="unitVo.heatingForm != null">
            and u.heating_form = #{unitVo.heatingForm,jdbcType=VARCHAR}
          </if>
          <if test="unitVo.companyId != null">
            and u.company_id = #{unitVo.companyId,jdbcType=VARCHAR}
          </if>
        </if>
        <if test="sortby!=null">
          order by ${sortby}
        </if>
        <if test="order!=null">
          ${order}
        </if>
        <if test="start!=null and pageSize!=null">
          limit ${start},${pageSize}
        </if>
      </if>
      <if test="buildingIds.size()==0">
        where
        1 = 0
      </if>
    </if>
  </select>

  <select id="selectUnitListCount" parameterType="cn.plou.web.system.baseMessage.unit.vo.UnitSelectInfo" resultType="java.lang.Integer">
    select count(*)
    from unit_info u
    <if test="buildingIds != null">
      <if test="buildingIds.size()!=0">
        where u.unit_id is not null
        and u.building_id in
        <foreach collection="buildingIds" item="item" open="(" separator="," close=")">
          #{item}
        </foreach>
        <if test="unitVo != null">
          <if test="unitVo.unitName != null">
            and u.unit_name = #{unitVo.unitName,jdbcType=VARCHAR}
          </if>
          <if test="unitVo.buildingArea != null">
            and u.building_area = #{unitVo.buildingArea,jdbcType=DECIMAL}
          </if>
          <if test="unitVo.controlType != null">
            and u.control_type = #{unitVo.controlType,jdbcType=VARCHAR}
          </if>
          <if test="unitVo.heatingForm != null">
            and u.heating_form = #{unitVo.heatingForm,jdbcType=VARCHAR}
          </if>
          <if test="unitVo.companyId != null">
            and u.company_id = #{unitVo.companyId,jdbcType=VARCHAR}
          </if>
        </if>
      </if>
      <if test="buildingIds.size()==0">
        where
        1 = 0
      </if>
    </if>
  </select>

  <delete id="deleteByPrimaryKey" parameterType="cn.plou.web.system.baseMessage.unit.entity.UnitKey">
    delete from unit_info
    where unit_id = #{unitId,jdbcType=VARCHAR}
      and rowno = #{rowno,jdbcType=VARCHAR}
  </delete>

  <delete id="deleteBatchByIds" parameterType="java.util.List">
    delete from unit_info
    where unit_id in
    <foreach collection="list" item="item" open="(" separator="," close=")" >
      #{item}
    </foreach>
  </delete>

  <insert id="insert" parameterType="cn.plou.web.system.baseMessage.unit.entity.Unit">
    insert into unit_info (unit_id, rowno, building_id, 
      unit_name, building_area, diameter, 
      control_type, floor_num, floor_house, 
      heating_form, has_build_meter, has_balance_valve, 
      company_id, address, notes, 
      memo1, memo2, create_date, 
      create_user, update_date, update_user, 
      water_control_type, water_has_build_meter, index, 
      isvalid)
    values (#{unitId,jdbcType=VARCHAR}, #{rowno,jdbcType=VARCHAR}, #{buildingId,jdbcType=VARCHAR}, 
      #{unitName,jdbcType=VARCHAR}, #{buildingArea,jdbcType=DECIMAL}, #{diameter,jdbcType=VARCHAR}, 
      #{controlType,jdbcType=VARCHAR}, #{floorNum,jdbcType=VARCHAR}, #{floorHouse,jdbcType=DECIMAL}, 
      #{heatingForm,jdbcType=VARCHAR}, #{hasBuildMeter,jdbcType=VARCHAR}, #{hasBalanceValve,jdbcType=VARCHAR},
      #{companyId,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{notes,jdbcType=VARCHAR}, 
      #{memo1,jdbcType=VARCHAR}, #{memo2,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, 
      #{createUser,jdbcType=VARCHAR}, #{updateDate,jdbcType=TIMESTAMP}, #{updateUser,jdbcType=VARCHAR}, 
      #{waterControlType,jdbcType=VARCHAR}, #{waterHasBuildMeter,jdbcType=VARCHAR}, #{index,jdbcType=INTEGER},
      #{isvalid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cn.plou.web.system.baseMessage.unit.entity.Unit">
    insert into unit_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="unitId != null">
        unit_id,
      </if>
      <if test="rowno != null">
        rowno,
      </if>
      <if test="buildingId != null">
        building_id,
      </if>
      <if test="unitName != null">
        unit_name,
      </if>
      <if test="buildingArea != null">
        building_area,
      </if>
      <if test="diameter != null">
        diameter,
      </if>
      <if test="controlType != null">
        control_type,
      </if>
      <if test="floorNum != null">
        floor_num,
      </if>
      <if test="floorHouse != null">
        floor_house,
      </if>
      <if test="heatingForm != null">
        heating_form,
      </if>
      <if test="hasBuildMeter != null">
        has_build_meter,
      </if>
      <if test="hasBalanceValve != null">
        has_balance_valve,
      </if>
      <if test="companyId != null">
        company_id,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="notes != null">
        notes,
      </if>
      <if test="memo1 != null">
        memo1,
      </if>
      <if test="memo2 != null">
        memo2,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
      <if test="waterControlType != null">
        water_control_type,
      </if>
      <if test="waterHasBuildMeter != null">
        water_has_build_meter,
      </if>
      <if test="index != null">
        `index`,
      </if>
      <if test="isvalid != null">
        isvalid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="unitId != null">
        #{unitId,jdbcType=VARCHAR},
      </if>
      <if test="rowno != null">
        #{rowno,jdbcType=VARCHAR},
      </if>
      <if test="buildingId != null">
        #{buildingId,jdbcType=VARCHAR},
      </if>
      <if test="unitName != null">
        #{unitName,jdbcType=VARCHAR},
      </if>
      <if test="buildingArea != null">
        #{buildingArea,jdbcType=DECIMAL},
      </if>
      <if test="diameter != null">
        #{diameter,jdbcType=VARCHAR},
      </if>
      <if test="controlType != null">
        #{controlType,jdbcType=VARCHAR},
      </if>
      <if test="floorNum != null">
        #{floorNum,jdbcType=VARCHAR},
      </if>
      <if test="floorHouse != null">
        #{floorHouse,jdbcType=DECIMAL},
      </if>
      <if test="heatingForm != null">
        #{heatingForm,jdbcType=VARCHAR},
      </if>
      <if test="hasBuildMeter != null">
        #{hasBuildMeter,jdbcType=VARCHAR},
      </if>
      <if test="hasBalanceValve != null">
        #{hasBalanceValve,jdbcType=VARCHAR},
      </if>
      <if test="companyId != null">
        #{companyId,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="notes != null">
        #{notes,jdbcType=VARCHAR},
      </if>
      <if test="memo1 != null">
        #{memo1,jdbcType=VARCHAR},
      </if>
      <if test="memo2 != null">
        #{memo2,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="waterControlType != null">
        #{waterControlType,jdbcType=VARCHAR},
      </if>
      <if test="waterHasBuildMeter != null">
        #{waterHasBuildMeter,jdbcType=VARCHAR},
      </if>
      <if test="index != null">
        #{index,jdbcType=INTEGER},
      </if>
      <if test="isvalid != null">
        #{isvalid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.plou.web.system.baseMessage.unit.entity.Unit">
    update unit_info
    <set>
      <if test="buildingId != null">
        building_id = #{buildingId,jdbcType=VARCHAR},
      </if>
      <if test="unitName != null">
        unit_name = #{unitName,jdbcType=VARCHAR},
      </if>
      <if test="buildingArea != null">
        building_area = #{buildingArea,jdbcType=DECIMAL},
      </if>
      <if test="diameter != null">
        diameter = #{diameter,jdbcType=VARCHAR},
      </if>
      <if test="controlType != null">
        control_type = #{controlType,jdbcType=VARCHAR},
      </if>
      <if test="floorNum != null">
        floor_num = #{floorNum,jdbcType=VARCHAR},
      </if>
      <if test="floorHouse != null">
        floor_house = #{floorHouse,jdbcType=DECIMAL},
      </if>
      <if test="heatingForm != null">
        heating_form = #{heatingForm,jdbcType=VARCHAR},
      </if>
      <if test="hasBuildMeter != null">
        has_build_meter = #{hasBuildMeter,jdbcType=DECIMAL},
      </if>
      <if test="hasBalanceValve != null">
        has_balance_valve = #{hasBalanceValve,jdbcType=DECIMAL},
      </if>
      <if test="companyId != null">
        company_id = #{companyId,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="notes != null">
        notes = #{notes,jdbcType=VARCHAR},
      </if>
      <if test="memo1 != null">
        memo1 = #{memo1,jdbcType=VARCHAR},
      </if>
      <if test="memo2 != null">
        memo2 = #{memo2,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="waterControlType != null">
        water_control_type = #{waterControlType,jdbcType=VARCHAR},
      </if>
      <if test="waterHasBuildMeter != null">
        water_has_build_meter = #{waterHasBuildMeter,jdbcType=VARCHAR},
      </if>
      <if test="index != null">
        index = #{index,jdbcType=INTEGER},
      </if>
      <if test="isvalid != null">
        isvalid = #{isvalid,jdbcType=INTEGER},
      </if>
    </set>
    where unit_id = #{unitId,jdbcType=VARCHAR}
  </update>

  <update id="updateBatch" parameterType="cn.plou.web.system.baseMessage.unit.vo.UnitVo">
    update unit_info
    <set>
    <if test="buildingId != null">
      building_id = #{buildingId,jdbcType=VARCHAR},
    </if>
    <if test="unitName != null">
      unit_name = #{unitName,jdbcType=VARCHAR},
    </if>
    <if test="buildingArea != null">
      building_area = #{buildingArea,jdbcType=DECIMAL},
    </if>
    <if test="diameter != null">
      diameter = #{diameter,jdbcType=VARCHAR},
    </if>
    <if test="controlType != null">
      control_type = #{controlType,jdbcType=VARCHAR},
    </if>
    <if test="floorNum != null">
      floor_num = #{floorNum,jdbcType=VARCHAR},
    </if>
    <if test="floorHouse != null">
      floor_house = #{floorHouse,jdbcType=DECIMAL},
    </if>
    <if test="heatingForm != null">
      heating_form = #{heatingForm,jdbcType=VARCHAR},
    </if>
    <if test="hasBalanceValve != null">
      has_balance_valve = #{hasBalanceValve,jdbcType=VARCHAR},
    </if>
    <if test="companyId != null">
      company_id = #{companyId,jdbcType=VARCHAR},
    </if>
    <if test="address != null">
      address = #{address,jdbcType=VARCHAR},
    </if>
    <if test="notes != null">
      notes = #{notes,jdbcType=VARCHAR},
    </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
    </set>
    where unit_id in
    <foreach collection="unitIds" item="item" index="index" open="(" separator="," close=")">
      #{item}
    </foreach>
  </update>

  <update id="updateByPrimaryKey" parameterType="cn.plou.web.system.baseMessage.unit.entity.Unit">
    update unit_info
    set building_id = #{buildingId,jdbcType=VARCHAR},
      unit_name = #{unitName,jdbcType=VARCHAR},
      building_area = #{buildingArea,jdbcType=DECIMAL},
      diameter = #{diameter,jdbcType=VARCHAR},
      control_type = #{controlType,jdbcType=VARCHAR},
      floor_num = #{floorNum,jdbcType=VARCHAR},
      floor_house = #{floorHouse,jdbcType=DECIMAL},
      heating_form = #{heatingForm,jdbcType=VARCHAR},
      has_build_meter = #{hasBuildMeter,jdbcType=VARCHAR},
      has_balance_valve = #{hasBalanceValve,jdbcType=VARCHAR},
      company_id = #{companyId,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      notes = #{notes,jdbcType=VARCHAR},
      memo1 = #{memo1,jdbcType=VARCHAR},
      memo2 = #{memo2,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=VARCHAR},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=VARCHAR},
      water_control_type = #{waterControlType,jdbcType=VARCHAR},
      water_has_build_meter = #{waterHasBuildMeter,jdbcType=VARCHAR},
      index = #{index,jdbcType=INTEGER},
      isvalid = #{isvalid,jdbcType=INTEGER}
    where unit_id = #{unitId,jdbcType=VARCHAR}
      and rowno = #{rowno,jdbcType=VARCHAR}
  </update>
  
  <update id="updateBatchAll" parameterType="cn.plou.web.system.baseMessage.unit.vo.UnitVo">
    update unit_info
    <set>
    <if test="buildingId != null">
      building_id = #{buildingId,jdbcType=VARCHAR},
    </if>
    <if test="unitName != null">
      unit_name = #{unitName,jdbcType=VARCHAR},
    </if>
    <if test="buildingArea != null">
      building_area = #{buildingArea,jdbcType=DECIMAL},
    </if>
    <if test="diameter != null">
      diameter = #{diameter,jdbcType=VARCHAR},
    </if>
    <if test="controlType != null">
      control_type = #{controlType,jdbcType=VARCHAR},
    </if>
    <if test="floorNum != null">
      floor_num = #{floorNum,jdbcType=VARCHAR},
    </if>
    <if test="floorHouse != null">
      floor_house = #{floorHouse,jdbcType=DECIMAL},
    </if>
    <if test="heatingForm != null">
      heating_form = #{heatingForm,jdbcType=VARCHAR},
    </if>
    <if test="hasBalanceValve != null">
      has_balance_valve = #{hasBalanceValve,jdbcType=VARCHAR},
    </if>
    <if test="companyId != null">
      company_id = #{companyId,jdbcType=VARCHAR},
    </if>
    <if test="address != null">
      address = #{address,jdbcType=VARCHAR},
    </if>
    <if test="notes != null">
      notes = #{notes,jdbcType=VARCHAR},
    </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
    </set>
     where unit_id like (CONCAT(#{batchModifyId,jdbcType=VARCHAR},'%'))
  </update>
  
  <update id="updateBatchAllStation" parameterType="cn.plou.web.system.baseMessage.unit.vo.UnitVo">
    update unit_info
    <set>
    <if test="buildingId != null">
      building_id = #{buildingId,jdbcType=VARCHAR},
    </if>
    <if test="unitName != null">
      unit_name = #{unitName,jdbcType=VARCHAR},
    </if>
    <if test="buildingArea != null">
      building_area = #{buildingArea,jdbcType=DECIMAL},
    </if>
    <if test="diameter != null">
      diameter = #{diameter,jdbcType=VARCHAR},
    </if>
    <if test="controlType != null">
      control_type = #{controlType,jdbcType=VARCHAR},
    </if>
    <if test="floorNum != null">
      floor_num = #{floorNum,jdbcType=VARCHAR},
    </if>
    <if test="floorHouse != null">
      floor_house = #{floorHouse,jdbcType=DECIMAL},
    </if>
    <if test="heatingForm != null">
      heating_form = #{heatingForm,jdbcType=VARCHAR},
    </if>
    <if test="hasBalanceValve != null">
      has_balance_valve = #{hasBalanceValve,jdbcType=VARCHAR},
    </if>
    <if test="companyId != null">
      company_id = #{companyId,jdbcType=VARCHAR},
    </if>
    <if test="address != null">
      address = #{address,jdbcType=VARCHAR},
    </if>
    <if test="notes != null">
      notes = #{notes,jdbcType=VARCHAR},
    </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
    </set>
     where 
	 <foreach collection="communitys" item="item" index="index"  separator="OR">
          `unit_id` LIKE CONCAT(#{item},'%')
     </foreach>
  </update>
  
  <select id="getMaxUnitId" parameterType="java.lang.String" resultType="java.lang.String">
     select
       max(unit_id)
     from unit_info
     where substring(unit_id,1,13)=#{buildId}
  </select>
  
  <select id="getAllUnitByCommuity" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    unit_id,unit_name,building_id
    from unit_info
    where substring(unit_id,1,10)=#{commuity}
  </select>
  
  <insert id= "addBatch" parameterType="list">
       insert into unit_info 
      <trim prefix="(" suffix=")" suffixOverrides=",">
            unit_id,
			rowno,
			building_id,
			unit_name,
			building_area,
			diameter,
			control_type,
			floor_num,
			floor_house,
			heating_form,
			has_build_meter,
			has_balance_valve,
			company_id,
			address,
			notes,
			water_control_type,
			water_has_build_meter,
			isvalid
        </trim>
    values 
	<foreach collection="list" item="unit" index="index" separator=",">
	(
		#{unit.unitId,jdbcType=VARCHAR},#{unit.rowno,jdbcType=VARCHAR},#{unit.buildingId,jdbcType=VARCHAR},
		#{unit.unitName,jdbcType=VARCHAR},#{unit.buildingArea,jdbcType=DECIMAL},#{unit.diameter,jdbcType=VARCHAR},
		#{unit.controlType,jdbcType=VARCHAR},#{unit.floorNum,jdbcType=VARCHAR},#{unit.floorHouse,jdbcType=DECIMAL},
		#{unit.heatingForm,jdbcType=VARCHAR},#{unit.hasBuildMeter,jdbcType=VARCHAR},#{unit.hasBalanceValve,jdbcType=VARCHAR},
		#{unit.companyId,jdbcType=VARCHAR},#{unit.address,jdbcType=VARCHAR},#{unit.notes,jdbcType=VARCHAR},
		#{unit.waterControlType,jdbcType=VARCHAR},#{unit.waterHasBuildMeter,jdbcType=VARCHAR},1
    )
	</foreach>
	ON DUPLICATE KEY UPDATE
	    unit_id=values(unit_id),
		rowno=values(rowno),
		building_id=values(building_id),
		unit_name=values(unit_name),
		building_area=values(building_area),
		diameter=values(diameter),
		control_type=values(control_type),
		floor_num=values(floor_num),
		floor_house=values(floor_house),
		heating_form=values(heating_form),
		has_build_meter=values(has_build_meter),
		has_balance_valve=values(has_balance_valve),
		company_id=values(company_id),
		address=values(address),
		notes=values(notes),
		water_control_type=values(water_control_type),
		water_has_build_meter=values(water_has_build_meter),
		isvalid=values(isvalid)
	</insert>
	
	<select id="selectAllUnit2" parameterType="map" resultMap="InfoMap">
    select
    u.unit_id, u.rowno, u.building_id,
    u.unit_name unitName, u.building_area buildingArea, u.diameter,u.control_type controlType,u.heating_form heatingForm,
    u.floor_house floorHouse, u.company_id, u.address, u.notes,u.`index`,b.building_name buildingName,
    c.company_name companyName,u.floor_num floorNum,u.has_build_meter hasBuildMeter,u.has_balance_valve hasBalanceValve,
    u.water_control_type waterControlType,u.water_has_build_meter waterHasBuildMeterName
    from unit_info u
    left JOIN build_info b ON u.building_id = b.building_no
    left JOIN company_info c ON u.company_id = c.company_id
    where 1=1 
    <if test="companyIds!=null">
      <if test="companyIds.size()>0">
        and u.company_id in
        <foreach collection="companyIds" item="item" index="index" open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
    </if>
    <if test="commuityIds!=null">
      <if test="commuityIds.size()>0">
        and substring(u.unit_id,1,10) in
        <foreach collection="commuityIds" item="item" index="index" open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
    </if>
      <if test="buildingId!=null">
        and u.building_id = #{buildingId}
      </if>
      <if test="unitId!=null">
        and u.unit_id = #{unitId}
      </if>
        <if test="unitVo != null">
          <if test="unitVo.unitName != null">
            and u.unit_name LIKE concat('%',#{unitVo.unitName},'%')
          </if>
          <if test="unitVo.buildingArea != null">
            and u.building_area = #{unitVo.buildingArea,jdbcType=DECIMAL}
          </if>
          <if test="unitVo.buildingId != null">
            and u.building_id = #{unitVo.buildingId}
          </if>
          <if test="unitVo.controlType != null">
            and u.control_type = #{unitVo.controlType,jdbcType=VARCHAR}
          </if>
          <if test="unitVo.heatingForm != null">
            and u.heating_form = #{unitVo.heatingForm,jdbcType=VARCHAR}
          </if>
          <if test="unitVo.companyId != null">
            and u.company_id = #{unitVo.companyId,jdbcType=VARCHAR}
          </if>
         </if>
        <if test="sortby!=null">
          order by ${sortby}
        </if>
        <if test="order!=null">
          ${order}
        </if>
        <if test="start!=null and pageSize!=null">
          limit ${start},${pageSize}
        </if>
  </select>

  <select id="selectUnitListCount2" parameterType="map" resultType="java.lang.Integer">
    select count(*)
    from unit_info u
    where 1=1 
    <if test="companyIds!=null">
      <if test="companyIds.size()>0">
        and u.company_id in
        <foreach collection="companyIds" item="item" index="index" open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
    </if>
    <if test="commuityIds!=null">
      <if test="commuityIds.size()>0">
        and substring(u.unit_id,1,10) in
        <foreach collection="commuityIds" item="item" index="index" open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
    </if>
      <if test="buildingId!=null">
        and u.building_id = #{buildingId}
      </if>      
      <if test="unitId!=null">
        and u.unit_id = #{unitId}
      </if>
        <if test="unitVo != null">
          <if test="unitVo.unitName != null">
            and u.unit_name LIKE concat('%',#{unitVo.unitName},'%')
          </if>
          <if test="unitVo.buildingArea != null">
            and u.building_area = #{unitVo.buildingArea,jdbcType=DECIMAL}
          </if>
          <if test="unitVo.buildingId != null">
            and u.building_id = #{unitVo.buildingId}
          </if>
          <if test="unitVo.controlType != null">
            and u.control_type = #{unitVo.controlType,jdbcType=VARCHAR}
          </if>
          <if test="unitVo.heatingForm != null">
            and u.heating_form = #{unitVo.heatingForm,jdbcType=VARCHAR}
          </if>
          <if test="unitVo.companyId != null">
            and u.company_id = #{unitVo.companyId,jdbcType=VARCHAR}
          </if>
      </if>
  </select>
  <update id="modifyUnitName" parameterType="map">
    	update unit_info set address = concat(#{buildingAddress},#{nkey},unit_name) where unit_id like (concat(#{buildingNo},'%'))
  </update>


  <!-- ————————————————————————————————cache配置————————————————————————————  -->
  <cache eviction="FIFO" flushInterval="60000" size="1024"  readOnly="true"/>
</mapper>