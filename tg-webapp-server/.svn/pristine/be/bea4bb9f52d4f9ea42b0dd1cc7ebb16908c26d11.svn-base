package cn.plou.web.charge.chargeconfig.service.impl;

import cn.plou.web.charge.chargeconfig.dao.UserYearAccountDetailMapper;
import cn.plou.web.charge.chargeconfig.dao.UserYearHeatMapper;
import cn.plou.web.charge.chargeconfig.entity.UserYearAccountDetail;
import cn.plou.web.charge.chargeconfig.entity.UserYearHeat;
import cn.plou.web.charge.chargeconfig.service.UserYearAccountDetailService;
import cn.plou.web.charge.chargeconfig.service.UserYearHeatService;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.math.BigDecimal;
import java.util.List;

/**
 * @author yinxiaochen
 * 2018/8/15 15:38
 */


@Service
@Transactional(rollbackFor = Exception.class)
public class UserYearAccountDetailServiceImpl implements UserYearAccountDetailService {


    @Resource
    private UserYearAccountDetailMapper userYearAccountDetailMapper;
    @Override
    public int deleteByPrimaryKey(String primaryId) {
        return userYearAccountDetailMapper.deleteByPrimaryKey(primaryId);
    }

    @Override
    public int insert(UserYearAccountDetail record) {
        return userYearAccountDetailMapper.insert(record);
    }

    @Override
    public int insertSelective(UserYearAccountDetail record) {
        return userYearAccountDetailMapper.insertSelective(record);
    }

    @Override
    public UserYearAccountDetail selectByPrimaryKey(String primaryId) {
        return userYearAccountDetailMapper.selectByPrimaryKey(primaryId);
    }


    @Override
    public int updateByPrimaryKeySelective(UserYearAccountDetail record) {
        return userYearAccountDetailMapper.updateByPrimaryKeySelective(record);
    }

    @Override
    public int updateByPrimaryKey(UserYearAccountDetail record) {
        return userYearAccountDetailMapper.updateByPrimaryKey(record);
    }


    @Override
    public BigDecimal getTotalByConsumerId(String consumerId, String annual) {
        return userYearAccountDetailMapper.getTotalByConsumerId(consumerId, annual);
    }


    @Override
    public PageInfo<UserYearAccountDetail> findByUserAndAnnual(String consumerId, String annual,String order, String sortby, Integer page, Integer pageSize){
        PageHelper.startPage(page,pageSize);
        List<UserYearAccountDetail> userYearAccountDetailsByConsumerId = userYearAccountDetailMapper.findByUserAndAnnual(consumerId,annual,order,sortby,page,pageSize);
        PageInfo<UserYearAccountDetail> pageInfo=new PageInfo<>(userYearAccountDetailsByConsumerId);
        return pageInfo;

    }

    @Override
    public List<UserYearAccountDetail> findByThirdConsumerId(String thirdConsumerId) {
        return userYearAccountDetailMapper.findByThirdConsumerId(thirdConsumerId);
    }
}
