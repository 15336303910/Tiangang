package cn.plou.web.charge.chargeconfig.controller;

import cn.plou.web.charge.chargeconfig.dto.*;
import cn.plou.web.charge.chargeconfig.service.BankInterfaceHistoryService;
import cn.plou.web.charge.chargeconfig.service.BankInterfaceInfoService;
import cn.plou.web.charge.chargeconfig.service.BankReconciliationsDetailService;
import cn.plou.web.charge.chargeconfig.service.BankReconciliationsHeadService;
import cn.plou.web.charge.chargeconfig.vo.*;
import cn.plou.web.common.config.common.Constant;
import cn.plou.web.common.config.common.Root;
import cn.plou.web.common.exception.BindingResultHandler;
import cn.plou.web.common.utils.CommonServiceImp;
import cn.plou.web.system.baseMessage.commuity.service.CommuityService;
import com.github.pagehelper.PageInfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.servlet.ServletRequest;
import javax.validation.Valid;
import java.util.ArrayList;
import java.util.List;

import static cn.plou.web.common.config.common.Cond.getCond;

/**
 * @Description: 通道管理
 * @Param:
 * @Return:
 * @Author: youbc
 * @Date: 2018/9/18 16下午27
 */
@RestController
@RequestMapping("${chargePath}/channel-management")
public class ChannelManagementController {

    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private BankInterfaceHistoryService bankInterfaceHistoryService;

    @Autowired
    private BankInterfaceInfoService bankInterfaceInfoService;

    @Autowired
    private BankReconciliationsHeadService bankReconciliationsHeadService;

    @Autowired
    private BankReconciliationsDetailService bankReconciliationsDetailService;

    @Autowired
    private CommuityService commuityService;

    @Autowired
    private CommonServiceImp commonServiceImp;

    /**
     * @Description: 银行对接列表
     * @Param: [bankDockingSearchDTO, bindingResult]
     * @Return: cn.plou.web.common.config.common.Root
     * @Author: youbc
     * @Date: 2018/9/18 16下午58
     */
    @PostMapping("bank-docking-list")
    public Root bankDockingList(@Valid BankDockingSearchDTO bankDockingSearchDTO, BindingResult bindingResult) {
        BindingResultHandler.handle(bindingResult);
        List<BankDockingListVO> list = new ArrayList<>();
        Integer count = 0;
        String companyId = bankDockingSearchDTO.getCompanyId();
        if (companyId.length() == Constant.STATION_ID_LENGTH) {
            List<String> ids = commuityService.getCommuityIdsByStationId(companyId);
            if (ids.size() > 0) {
                list = bankInterfaceHistoryService.listOfStation(bankDockingSearchDTO, ids);
                count = bankInterfaceHistoryService.listCountOfStation(bankDockingSearchDTO, ids);
            }
        } else {
            list = bankInterfaceHistoryService.list(bankDockingSearchDTO);
            count = bankInterfaceHistoryService.listCount(bankDockingSearchDTO);
        }

        Root root = new Root();
        root.setData(list);
        root.setCond(getCond(bankDockingSearchDTO.getPage(), bankDockingSearchDTO.getPageSize(), count, bankDockingSearchDTO.getOrder(), bankDockingSearchDTO.getSortby()));
        return root;
    }

    /**
     * @Description: 银行对接列表导出 Excel
     * @Param: [request, bankDockingSearchDTO, bindingResult]
     * @Return: cn.plou.web.common.config.common.Root
     * @Author: youbc
     * @Date: 18/10/25 10上午46
     */
    @PostMapping("export-bank-docking-list")
    public Root exportBankDockingList(ServletRequest request, @Valid BankDockingSearchDTO bankDockingSearchDTO, BindingResult bindingResult) {
        BindingResultHandler.handle(bindingResult);
        List<BankDockingListVO> list = new ArrayList<>();
        String companyId = bankDockingSearchDTO.getCompanyId();
        if (companyId.length() == Constant.STATION_ID_LENGTH) {
            List<String> ids = commuityService.getCommuityIdsByStationId(companyId);
            if (ids.size() > 0) {
                list = bankInterfaceHistoryService.listOfStation(bankDockingSearchDTO, ids);
            }
        } else {
            list = bankInterfaceHistoryService.list(bankDockingSearchDTO);
        }

        Root root = new Root();
        root.setCode(0);
        root.setMsg("导出成功");
        root.setData(commonServiceImp.getHisDataByGridNameToExcel(request, "bankInterfaceHistory", "main", "通道管理-银行对接", list, true));
        return root;
    }

    /**
     * @Description: 对接设置列表
     * @Param: [bankDockingSearchDTO, bindingResult]
     * @Return: cn.plou.web.common.config.common.Root
     * @Author: youbc
     * @Date: 2018/9/19 8上午52
     */
    @PostMapping("docking-set-list")
    public Root dockingSetList(@Valid DockingSetSearchDTO bankDockingSearchDTO, BindingResult bindingResult) {
        BindingResultHandler.handle(bindingResult);
        List<DockingSetListVO> list = bankInterfaceInfoService.list(bankDockingSearchDTO);
        Root root = new Root();
        root.setData(list);
        root.setCond(getCond(bankDockingSearchDTO.getPage(), bankDockingSearchDTO.getPageSize(), bankInterfaceInfoService.listCount(bankDockingSearchDTO), bankDockingSearchDTO.getOrder(), bankDockingSearchDTO.getSortby()));
        return root;
    }

    /**
     * @Description: 对接设置列表导出 Excel
     * @Param: [request, bankDockingSearchDTO, bindingResult]
     * @Return: cn.plou.web.common.config.common.Root
     * @Author: youbc
     * @Date: 18/10/25 10上午49
     */
    @PostMapping("export-docking-set-list")
    public Root exportDockingSetList(ServletRequest request, @Valid DockingSetSearchDTO bankDockingSearchDTO, BindingResult bindingResult) {
        BindingResultHandler.handle(bindingResult);
        List<DockingSetListVO> list = bankInterfaceInfoService.list(bankDockingSearchDTO);
        Root root = new Root();
        root.setCode(0);
        root.setMsg("导出成功");
        root.setData(commonServiceImp.getHisDataByGridNameToExcel(request, "bankInterfaceSettings", "main", "通道管理-对接设置", list, true));
        return root;
    }

    /**
     * @Description: 保存对接设置信息
     * @Param: [dockingSetSaveDTO, bindingResult]
     * @Return: cn.plou.web.common.config.common.Root
     * @Author: youbc
     * @Date: 2018/9/19 9上午18
     */
    @PostMapping("save-set")
    public Root saveSet(@Valid DockingSetSaveDTO dockingSetSaveDTO, BindingResult bindingResult) {
        BindingResultHandler.handle(bindingResult);
        bankInterfaceInfoService.save(dockingSetSaveDTO);
        return new Root();
    }

    /**
     * @Description: 对接设置信息弹框
     * @Param: [primaryId]
     * @Return: cn.plou.web.charge.chargeconfig.vo.DockingSetInfoVO
     * @Author: youbc
     * @Date: 2018/9/19 10上午27
     */
    @GetMapping("get-set")
    public DockingSetInfoVO getSet(@RequestParam String primaryId) {
        return bankInterfaceInfoService.getSet(primaryId);
    }

    /**
     * @Description: 删除对接设置信息
     * @Param: [primaryId]
     * @Return: cn.plou.web.common.config.common.Root
     * @Author: youbc
     * @Date: 2018/9/19 10上午30
     */
    @PostMapping("delete-set")
    public Root deleteSet(@RequestParam String primaryId) {
        bankInterfaceInfoService.deleteSet(primaryId);
        return new Root();
    }

    /**
     * @Description: 银行对账-总账数据列表
     * @Param: [generalLedgerSearchDTO, bindingResult]
     * @Return: cn.plou.web.common.config.common.Root
     * @Author: youbc
     * @Date: 18/10/15 10上午51
     */
    @PostMapping("general-ledger-list")
    public Root generalLedgerList(@Valid GeneralLedgerSearchDTO generalLedgerSearchDTO, BindingResult bindingResult) {
        BindingResultHandler.handle(bindingResult);
        PageInfo<GeneralLedgerListVO> pageInfo = bankReconciliationsHeadService.generalLedgerList(generalLedgerSearchDTO);

        Root root = new Root();
        root.setData(pageInfo.getList());
        root.setCond(getCond(generalLedgerSearchDTO.getPage(), generalLedgerSearchDTO.getPageSize(), (int) pageInfo.getTotal(), generalLedgerSearchDTO.getOrder(), generalLedgerSearchDTO.getSortby()));
        return root;
    }

    /**
     * @Description: 银行对账-总账数据列表导出 Excel
     * @Param: [request, generalLedgerSearchDTO, bindingResult]
     * @Return: cn.plou.web.common.config.common.Root
     * @Author: youbc
     * @Date: 18/10/25 10上午58
     */
    @PostMapping("export-general-ledger-list")
    public Root exportGeneralLedgerList(ServletRequest request, @Valid GeneralLedgerSearchDTO generalLedgerSearchDTO, BindingResult bindingResult) {
        BindingResultHandler.handle(bindingResult);
        PageInfo<GeneralLedgerListVO> pageInfo = bankReconciliationsHeadService.generalLedgerList(generalLedgerSearchDTO);

        Root root = new Root();
        root.setCode(0);
        root.setMsg("导出成功");
        root.setData(commonServiceImp.getHisDataByGridNameToExcel(request, "bankReconciliation", "total", "通道管理-银行对账-总账数据", pageInfo.getList(), true));
        return root;
    }

    /**
     * @Description: 银行对账-明细数据
     * @Param: [ledgerDetailSearchDTO, bindingResult]
     * @Return: cn.plou.web.common.config.common.Root
     * @Author: youbc
     * @Date: 18/10/15 11上午09
     */
    @PostMapping("ledger-detail-list")
    public Root ledgerDetailList(@Valid LedgerDetailSearchDTO ledgerDetailSearchDTO, BindingResult bindingResult) {
        BindingResultHandler.handle(bindingResult);
        PageInfo<LedgerDetailListVO> pageInfo = bankReconciliationsDetailService.ledgerDetailList(ledgerDetailSearchDTO);

        Root root = new Root();
        root.setData(pageInfo.getList());
        root.setCond(getCond(ledgerDetailSearchDTO.getPage(), ledgerDetailSearchDTO.getPageSize(), (int) pageInfo.getTotal(), ledgerDetailSearchDTO.getOrder(), ledgerDetailSearchDTO.getSortby()));
        return root;
    }

    /**
     * @Description: 银行对账-明细数据导出 Excel
     * @Param: [request, ledgerDetailSearchDTO, bindingResult]
     * @Return: cn.plou.web.common.config.common.Root
     * @Author: youbc
     * @Date: 18/10/25 11上午01
     */
    @PostMapping("export-ledger-detail-list")
    public Root exportLedgerDetailList(ServletRequest request, @Valid LedgerDetailSearchDTO ledgerDetailSearchDTO, BindingResult bindingResult) {
        BindingResultHandler.handle(bindingResult);
        PageInfo<LedgerDetailListVO> pageInfo = bankReconciliationsDetailService.ledgerDetailList(ledgerDetailSearchDTO);

        Root root = new Root();
        root.setCode(0);
        root.setMsg("导出成功");
        root.setData(commonServiceImp.getHisDataByGridNameToExcel(request, "bankReconciliation", "detail", "通道管理-银行对账-明细数据", pageInfo.getList(), true));
        return root;
    }
}
