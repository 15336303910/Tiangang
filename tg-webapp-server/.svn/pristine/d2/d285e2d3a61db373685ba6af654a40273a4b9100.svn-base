package cn.plou.web.mobile.station.service.impl;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.commons.lang.time.StopWatch;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;

import cn.plou.common.constant.CKey;
import cn.plou.common.utils.Tools;
import cn.plou.component.es.ESTool;
import cn.plou.web.mobile.common.AppTools;
import cn.plou.web.mobile.station.service.StationAppService;
import cn.plou.web.mobile.station.vo.RunningDataVo;
import cn.plou.web.station.stationDataPoint.dao.StationDataPointMapper;
import cn.plou.web.station.stationDataPoint.vo.StationDataPointVo;
import cn.plou.web.station.stationDevRelative.dao.StationDevRelativeMapper;
import cn.plou.web.station.stationshowdev.dao.StationShowDevMapper;
import cn.plou.web.station.stationshowdev.entity.StationShowDev;
import cn.plou.web.system.baseMessage.station.dao.StationMapper;
import cn.plou.web.system.baseMessage.system.dao.SystemMapper;
import cn.plou.web.system.baseMessage.system.vo.SystemInfoVo;
import cn.plou.web.system.commonMessage.heatingTime.dao.HeatingTimeMapper;
import cn.plou.web.system.permission.rlRoleData.dao.RlRoleDataMapper;
import cn.plou.web.system.permission.rlRoleData.entity.RlRoleData;
import cn.plou.web.system.permission.rlUserRole.dao.RlUserRoleMapper;

/**
 * @Project : tg-webapp-server
 * @File : StationAppServiceImpl.java
 * @Author : WangJiWei
 * @Date : 2018年9月19日下午1:40:33
 *
 * @Comments :
 * 
 */
@Service
public class StationAppServiceImpl implements StationAppService {

    @Autowired
    RlRoleDataMapper rlRoleDataMapper;
    @Autowired
    RlUserRoleMapper userRoleMapper;
    @Autowired
    SystemMapper systemMapper;
    @Autowired
    StationMapper stationMapper;
    @Autowired
    StationDataPointMapper stationDataPointMapper;
    @Autowired
    StationShowDevMapper stationShowDevMapper;
    @Autowired
    ESTool es;
    @Autowired
    HeatingTimeMapper heatingTimeMapper;

    @Override
    public List<RlRoleData> findRoleDataByUserId(String userId) {
	String roleId = userRoleMapper.selectRoleByUserId(userId);
	return rlRoleDataMapper.selectRlRoleDataByRoleId(roleId);
    }

    @Override
    public List<SystemInfoVo> findSystemByUserId(String userId) {
	List<SystemInfoVo> systemInfos = null;
	List<RlRoleData> ds = findRoleDataByUserId(userId);
	if (!Tools.isNotEmpty(ds)) {
	    return systemInfos;
	}
	List<String> ids = AppTools.objectExtractIds(ds, c -> c.getColumnValue());
	/** 站级权限与公司级权限对于同一角色保持一致 */
	RlRoleData rd = ds.stream().findAny().get();
	if (Tools.equals(rd.getColumnType(), "E")) { // 站级权限
	    systemInfos = systemMapper.getSystemByStationIds(ids);
	} else if (Tools.equals(rd.getColumnType(), "A")) { // 公司级权限
	    systemInfos = systemMapper.getSystemByCompanyIds(ids);
	}
	return systemInfos;
    }

    /**
     * TODO app显示数据根据用户,灵活配置展示项
     * systemId->{供回水数据:[供水温度、回水温度、供水压力、回水压力],流量/功率:[循环流量、瞬时功率、补水流量]...}
     */
    @Override
    public List<RunningDataVo> findRunningData(String userId, String systemId) {

	/** 当前系统ID下有效点位最新数据 */
	List<StationDataPointVo> sdps = stationDataPointMapper.findDataBySystemId(systemId, 0);
	/** 当前系统ID下热泵数据 最新数据 */
	cn.plou.web.system.baseMessage.system.entity.System system = getSystem(systemId);
	String stationId = system.getStationId();
	String companyId = system.getCompanyId();
	List<StationShowDev> hPumpInfos = stationShowDevMapper.findBySourceIds(
		Arrays.asList(systemId, stationId), "1");/* devType:1 */
	List<String> hPumpIds = AppTools.objectExtractIds(hPumpInfos, h -> h.getDevId());
	List<StationDataPointVo> hPumpsData = stationDataPointMapper.findDataBySystemIds(hPumpIds,
		0);
	sdps.addAll(hPumpsData);

	/** 所有点位按显示项分组 */
	Map<String, List<StationDataPointVo>> showGroup = AppTools.groupBy(sdps,
		StationDataPointVo::getShowdevtype);

	if (!showGroup.containsKey("COP")) { // 如果有cop的点位配置
	    // TODO 今日 、总量
	    Date start = getHeatTimeStart(stationId, companyId);// 当前站采暖季开始时间
	    @SuppressWarnings({ "unchecked", "rawtypes" })
	    Map<String, Object> conditions = new HashMap() { // 每小时的cop
		private static final long serialVersionUID = 1L;
		{
		    put("systemId", systemId);
		    put("from", "2018-07-25 21:00:00");// TODO
		    put("to", Tools.currentTime());// TODO
		}
	    };
	    StopWatch sw = new StopWatch();
	    sw.start();
	    List<Map<String, Object>> copLine = es.search(/* "小时级别COP索引表" */"station_data_point",
		    "station/search_cop_hourly_level", conditions);
	    sw.stop();
	    System.out.println("cost time = " + sw.getTime());
	    System.out.println(copLine.size());
	}
	List<RunningDataVo> rdvs = Lists.newArrayList();
	return rdvs;
    }

    /***
     * 采暖季开始时间
     */
    private Date getHeatTimeStart(String stationId, String companyId) {
	Date start = heatingTimeMapper.getStartByStation(stationId);
	/* 如果当前站没有采暖季开始时间,则取公司级 */
	return start == null ? heatingTimeMapper.getStartByCompany(companyId) : start;
    }

    private cn.plou.web.system.baseMessage.system.entity.System getSystem(String systemId) {
	System.out.println();
	cn.plou.web.system.baseMessage.system.entity.System systemInfo = systemMapper
		.selectByPrimaryKey(systemId);
	return systemInfo;
    }

}
