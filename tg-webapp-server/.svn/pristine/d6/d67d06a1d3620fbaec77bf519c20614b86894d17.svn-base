package cn.plou.web.balance.regulate.controller;

import cn.plou.web.balance.distribution.entity.BalanceValveDataNow;
import cn.plou.web.balance.distribution.vo.BalanceValveDataNowInfo;
import cn.plou.web.balance.distribution.vo.BalanceValveDataNowSelectInfo;
import cn.plou.web.balance.distribution.vo.SearchCondition;
import cn.plou.web.balance.regulate.service.RegulateService;
import cn.plou.web.balance.regulate.vo.BalanceValveDataNowBatch;
import cn.plou.web.common.config.common.Root;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;
import java.util.List;

@RestController
@EnableSwagger2
//@RequestMapping("${balancePath}/regulate")
@RequestMapping("balance/regulate")
@Api(description = "平衡控制")
public class RegulateController {
    @Autowired
    private RegulateService regulateService;
    @ApiOperation(value = "获取平衡阀值列表")
    @PostMapping("/getBalanceDataList")
    //@RequiresPermissions("")
    public Root getBalanceDataList(@RequestBody BalanceValveDataNowSelectInfo balanceValveDataNowSelectInfo){
        Root root =  regulateService.getBalanceDataList(balanceValveDataNowSelectInfo.getSearchCondition()
            ,balanceValveDataNowSelectInfo.getCompanyId(),balanceValveDataNowSelectInfo.getStationId(),balanceValveDataNowSelectInfo.getCommuityId(),balanceValveDataNowSelectInfo.getBuildingId(),balanceValveDataNowSelectInfo.getSortby(),balanceValveDataNowSelectInfo.getOrder(),
            balanceValveDataNowSelectInfo.getPage(),balanceValveDataNowSelectInfo.getPageSize());
        return root;
    }

    @ApiOperation(value = "控制操作")
    @PostMapping("/operationSingle")
    //@RequiresPermissions("")
    public Root regulateOperationSingle(@RequestBody BalanceValveDataNowBatch balanceValveDataNowBatch){
        Root root = new Root();
        if(balanceValveDataNowBatch.getMeterIds() == null){
        	List<String> meterIds = new ArrayList<String>();
        	meterIds.add(balanceValveDataNowBatch.getMeterId());
        	balanceValveDataNowBatch.setMeterIds(meterIds);
        }
        regulateService.operControl(balanceValveDataNowBatch);
        root.setData(regulateService.modifyBalanceValveParamBatch(balanceValveDataNowBatch));
        return root;
    }
    
    @ApiOperation(value = "批量控制操作")
    @PostMapping("/operationBatch")
    //@RequiresPermissions("")
    public Root regulateOperationBatch(@RequestBody BalanceValveDataNowBatch balanceValveDataNowBatch){
        Root root = new Root();
        regulateService.operControl(balanceValveDataNowBatch);
        root.setData(regulateService.modifyBalanceValveParamBatch(balanceValveDataNowBatch));
        return root;
    }
    
    @ApiOperation(value = "设备参数")
    @PostMapping("/meterParam")
    //@RequiresPermissions("")
    public Root regulateMeterParam(@RequestBody BalanceValveDataNowBatch balanceValveDataNowBatch){
        Root root = new Root();
        root.setData(regulateService.modifyBalanceValveParamBatch(balanceValveDataNowBatch));
        return root;
    }

    @ApiOperation(value = "曲线参数")
    @PostMapping("/curveParam")
    //@RequiresPermissions("")
    public Root regulateCurveParam(@RequestBody BalanceValveDataNowBatch balanceValveDataNowBatch){
        Root root = new Root();
        root.setData(regulateService.modifyBalanceValveParamBatch(balanceValveDataNowBatch));
        return root;
    }

    @ApiOperation(value="获取阀的偏差值")
    @GetMapping("/deviation")
    public Root getDeviationsByBalanceValve(){
        Root root = new Root();
        SearchCondition searchCondition = new SearchCondition();
        searchCondition.setFlowingIndex("20|");
        searchCondition.setHeatingIndex("20|");
        searchCondition.setFlowingDeviation("20|");
        searchCondition.setPressureDeviation("20|");
        searchCondition.setTemperatureDeviation("20|");
        root.setData(searchCondition);
        return root;
    }
}
