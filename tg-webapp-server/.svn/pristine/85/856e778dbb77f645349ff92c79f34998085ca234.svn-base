package cn.plou.web.mobile.station.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.google.common.collect.Sets;

import cn.plou.web.common.config.common.BusinessException;
import cn.plou.web.common.config.common.Cond;
import cn.plou.web.common.config.common.Constant;
import cn.plou.web.common.constant.CKey;
import cn.plou.web.common.utils.UserUtils;
import cn.plou.web.mobile.common.AppTools;
import cn.plou.web.mobile.station.query.AlarmsQuery;
import cn.plou.web.mobile.station.query.EventInfoQuery;
import cn.plou.web.mobile.station.query.ParamQuery;
import cn.plou.web.mobile.station.service.heatrun.AlarmService;
import cn.plou.web.mobile.station.service.heatrun.ParamDetailService;
import cn.plou.web.mobile.station.service.heatrun.RunningDataService;
import cn.plou.web.mobile.station.service.heatrun.StationAppService;
import cn.plou.web.mobile.station.vo.LineData;
import cn.plou.web.mobile.station.vo.ParamGroupVo;
import cn.plou.web.mobile.station.vo.RunningDataVo;
import cn.plou.web.mobile.station.vo.ShowDevTypeVo;
import cn.plou.web.station.alarm.vo.AlarmInfoVo;
import cn.plou.web.station.event.entity.EventInfo;
import cn.plou.web.station.stationDataPoint.vo.StationDataPointVo;
import cn.plou.web.system.baseMessage.system.vo.SystemInfoVo;
import cn.plou.web.system.commonMessage.typeMst.entity.TypeMst;
import cn.plou.web.system.commonMessage.typeMst.service.TypeMstService;

/**
 * @Project : tg-webapp-server
 * @File : HeatRunController.java
 * @Author : WangJiWei
 * @Date : 2018年9月19日上午9:18:30
 *
 * @Comments :热力运行模块
 * 
 */
@RestController
@RequestMapping("/mobile/heatrun")
public class HeatRunController extends AppBaseController {

    @Autowired
    StationAppService stationService;
    @Autowired
    AlarmService alarmService;
    @Autowired
    RunningDataService runningDataService;
    @Autowired
    ParamDetailService paramDetailService;
    @Autowired
    TypeMstService typeMstService;

    /**
     * 获取用户权限内的所有系统
     */
    @RequestMapping("/systems")
    public Object findStationInfoList() throws Exception {

	/** TODO 登录复用web端 */
	// String userId = UserUtils.getUserId();
	String userId = "zbhb";
	checkUser(userId);
	List<SystemInfoVo> systems = stationService.findSystemByUserId(userId);
	return success(JSON.toJSON(systems));
    }

    /**
     * 实时数据
     */
    @GetMapping("/system/{systemId}/metrics")
    public Object realTimeData(@PathVariable String systemId) throws Exception {
	String userId = "zbhb";
	checkUser(userId);
	List<RunningDataVo> rdv = runningDataService.findRunningData(userId, systemId);
	// Object data = JSONArray.parseArray(JSON.toJSONString(rdv));
	List<RunningDataVo> orr = null;
	if (AppTools.isNotEmpty(rdv)) {
	    /** 2018-10-27关注页添加排序 */
	    orr = rdv.stream().sorted(Comparator.comparing(RunningDataVo::getOrder))
		    .collect(Collectors.toList());
	}
	return success(orr);
    }

    @PostMapping("/alarm/count")
    public Object alarmCount(@RequestBody(required = false) List<String> systemIds)
	    throws Exception {
	systemIds = AppTools.isNotEmpty(systemIds) ? systemIds : checkSystemIds();
	Integer alarmCount = alarmService.alarmCount(systemIds);
	// JSONObject j = new JSONObject();
	// j.put("alarm", alarmCount);
	return success(alarmCount);
    }

    /**
     * 报警统计
     */
    @PostMapping("/alarm/stat")
    public Object alarmStat(@RequestBody(required = false) List<String> systemIds)
	    throws Exception {
	systemIds = AppTools.isNotEmpty(systemIds) ? systemIds : checkSystemIds();
	Map<String, Object> alarmStatistics = alarmService.findAlarmStatistics(systemIds);
	Object data = new JSONObject(alarmStatistics);
	return success(data);
    }

    private List<String> checkSystemIds() throws Exception {
	/* UserUtils.getUserId() */
	String userId = "zbhb";
	checkUser(userId);
	Set<String> temp = Sets.newHashSet();
	List<SystemInfoVo> sysInfos = stationService.findSystemByUserId(userId);
	if (AppTools.isNotEmpty(sysInfos)) {
	    temp = sysInfos.stream().map(SystemInfoVo::getSystemId).collect(Collectors.toSet());
	}
	return new ArrayList<>(temp); // TODO
    }

    /**
     * 查询字典
     */
    @RequestMapping("/typeMst")
    public Object typeMst(@RequestBody List<String> typeKbns) {
	List<TypeMst> typeMsts = typeMstService.findTypeMstByKbns(typeKbns);
	return success(typeMsts);
    }

    /**
     * 报警日志列表
     */
    @PostMapping("/alarm/list")
    public Object alarms(@RequestBody AlarmsQuery query) throws Exception {
	/*************************************************************/
	if (AppTools.isEmpty(query.getSystemIds())) {
	    query.setSystemIds(checkSystemIds());
	}
	query.setResultTime(null);
	Integer alarmTotal = alarmService.alarmTotal(query);
	Integer totalPage = (alarmTotal + query.getPageSize() - 1) / query.getPageSize();
	query.setPage(query.getPage() > totalPage ? totalPage : query.getPage());
	query.setPage(Math.max(query.getPage(), 1));
	query.setOffset((query.getPage() - 1) * query.getPageSize());
	/*************************************************************/
	List<AlarmInfoVo> alarms = alarmService.findAlarms(query);
	Cond cond = new Cond();
	cond.setPage(query.getPage());
	cond.setTotal(alarmTotal);
	return success(JSONArray.toJSON(alarms), cond);
    }

    /**
     * 报警确认
     */
    @PostMapping("/alarm/verify")
    public Object verifyAlarm(@RequestBody List<String> alarmIds) throws Exception {
	if (AppTools.isNotEmpty(alarmIds)) {
	    // String userId = UserUtils.getUserId();
	    String userId = "zbhb";
	    checkUser(userId);
	    alarmService.verifyAlarm(userId, alarmIds);
	}
	return success(null);
    }

    private void checkUser(String userId) throws BusinessException {
	if (userId == null) {
	    throw new BusinessException(Constant.DEFAULT_ERROR_STATUS_CODE, "用户名不能为空");
	}
    }

    /**
     * 操作日志
     */
    @PostMapping("/alarm/operations")
    public Object alarmOperations(@RequestBody EventInfoQuery query) throws Exception {
	/*************************************************************/
	if (query.getSourceids() == null || query.getSourceids().size() == 0) {
	    query.setSourceids(checkSystemIds());
	}
	query.setEventTime(StringUtils.isBlank(query.getEventTime())
		? AppTools.curDateStr(CKey.YMD_) : query.getEventTime());
	Integer eventTotal = alarmService.eventTotal(query);
	Integer totalPage = (eventTotal + query.getPageSize() - 1) / query.getPageSize();
	query.setPage(query.getPage() > totalPage ? totalPage : query.getPage());
	query.setPage(Math.max(query.getPage(), 1));
	query.setOffset((query.getPage() - 1) * query.getPageSize());
	/*************************************************************/
	List<EventInfo> events = alarmService.findEvents(query);
	Cond cond = new Cond();
	cond.setPage(query.getPage());
	cond.setTotal(eventTotal);
	return success(JSONArray.toJSON(events), cond);
    }

    /**
     * 参数列表页
     */
    @RequestMapping("/param/list")
    public Object paramList(String systemId) {
	List<ParamGroupVo> pgs = this.paramDetailService.findParamList(systemId);
	/**
	 * 2017-10-27全部页一级分组添加排序<br/>
	 * 后续:一级分组内二级分组排序、二级分组内点位排序 start
	 */
	List<ParamGroupVo> pgvs = null;
	if (AppTools.isNotEmpty(pgs)) {
	    pgvs = pgs.stream().sorted(Comparator.comparing(ParamGroupVo::getOrder))
		    .collect(Collectors.toList());
	    pgs.forEach(p -> {
		List<ShowDevTypeVo> sts = p.getShowdevtypes();
		if (AppTools.isNotEmpty(sts)) {
		    // 一级分组内二级分组按字典序排序
		    List<ShowDevTypeVo> ll = sts.stream()
			    .sorted(Comparator.comparing(ShowDevTypeVo::getShowdevtypeName))
			    .collect(Collectors.toList());
		    p.setShowdevtypes(ll);
		}
	    });
	}
	/**
	 * end
	 */
	return success(pgvs);
    }

    /**
     * 参数指标实时数据 TODO 具体点位历史(stationId,systemId)
     */
    @PostMapping("/param/{systemId}/{showdevtype}")
    public Object paramRunningData(@PathVariable String systemId,
	    @PathVariable String showdevtype) {

	List<StationDataPointVo> sdp = this.paramDetailService.findRunningDataByParam(systemId,
		showdevtype);
	long maxTime = findMaxTime(sdp);
	JSONObject obj = new JSONObject();
	obj.put("lastTime", maxTime);
	obj.put("metrics", sdp);
	return success(obj);
    }

    private long findMaxTime(List<StationDataPointVo> sdp) {
	long maxTime = 0L;
	for (StationDataPointVo s : sdp) {
	    Date time = s.getTime();
	    if (time != null && time.getTime() >= maxTime) {
		maxTime = time.getTime();
	    }
	}
	return maxTime;
    }

    /**
     * 指定参数曲线历史数据
     * 
     * @throws Exception
     */
    @PostMapping("/param/{systemId}/{showdevtype}/{pointid}")
    public Object paramHistory(@PathVariable String systemId, @PathVariable String showdevtype,
	    @PathVariable String pointid, @RequestBody ParamQuery paramQuery) throws Exception {
	List<LineData> his = this.paramDetailService.findHistory(systemId, pointid, paramQuery);
	Collections.reverse(his);
	return success(his);
    }

    /**
     * 参数历史数据列表 created by wzd.
     */
    @PostMapping("/param/{systemId}/{pointid}/list")
    public Object paramHistoryDataList(@PathVariable String systemId, @PathVariable String pointid,
	    @RequestBody ParamQuery paramQuery) throws Exception {
	/***************************************************************/
	paramQuery.setOrderBy("desc");
	Integer total = this.paramDetailService.findParamHistoryCount(systemId, pointid,
		paramQuery);
	Integer totalPage = (total + paramQuery.getPageSize() - 1) / paramQuery.getPageSize();
	paramQuery.setPage(paramQuery.getPage() > totalPage ? totalPage : paramQuery.getPage());
	paramQuery.setPage(Math.max(paramQuery.getPage(), 1));
	Integer offset = paramQuery.getPageSize() * (paramQuery.getPage() - 1);
	String Limit = "  limit " + offset + "," + paramQuery.getPageSize();
	/***************************************************************/
	List<LineData> his = this.paramDetailService.findParamHistoryDataList(systemId, pointid,
		Limit, paramQuery);
	Object data = JSONArray.toJSON(his);
	Cond cond = new Cond();
	cond.setPage(paramQuery.getPage());
	cond.setTotal(total);
	return success(data, cond);
    }

    public Object controlDev() {
	return null;
    }
}
