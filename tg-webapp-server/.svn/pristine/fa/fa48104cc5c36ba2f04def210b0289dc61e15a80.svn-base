package cn.plou.web.balance.distribution.controller;

import cn.plou.web.balance.trendCurve.entity.BuildRunningData;
import cn.plou.common.utils.DateUtil;
import cn.plou.web.balance.distribution.entity.SystemStaticData;
import cn.plou.web.balance.distribution.entity.TimeValue;
import cn.plou.web.balance.distribution.service.DistributionService;
import cn.plou.web.common.config.common.Root;
import cn.plou.web.system.baseMessage.build.service.BuildService;
import cn.plou.web.system.baseMessage.build.vo.BuildInfo;
import cn.plou.web.system.baseMessage.station.entity.Station;
import cn.plou.web.system.baseMessage.station.service.StationService;
import cn.plou.web.system.baseMessage.system.service.SystemService;
import cn.plou.web.system.baseMessage.system.vo.SystemInfo;
import cn.plou.web.system.baseMessage.system.vo.SystemListInfo;
import cn.plou.web.system.commonMessage.mapLine.service.MapLineService;
import cn.plou.web.system.commonMessage.mapLine.vo.MapLineInfo;
import cn.plou.web.system.organizationMessage.department.service.DepartmentService;
import cn.plou.web.system.organizationMessage.staff.entity.Staff;
import cn.plou.web.system.organizationMessage.staff.service.StaffService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import com.alibaba.fastjson.JSONObject;

import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

@RestController
@EnableSwagger2
//@RequestMapping("${balancePath}/distribution")
@RequestMapping("balance/distribution")
@Api(description = "楼宇平衡")
public class DistributionController {
    @Autowired
    private MapLineService mapLineService;
    @Autowired
    private BuildService buildService;
    @Autowired
    private DistributionService distributionService;
    @Autowired
    private StationService stationService;
    @Autowired
    private SystemService systemService;
    @Autowired
    private StaffService staffService;
    @ApiOperation(value = "获取站下平衡阀平均值")
    @GetMapping("/getStationAvg")
    //@RequiresPermissions("")
    public Object getStationAvg(@RequestParam String stationId){
        Station station = stationService.getStationById(stationId);
        JSONObject obj = new JSONObject();
        obj.put("stationName", station.getStationName());
        obj.put("address", station.getAddress());
        obj.put("stationId", stationId);
        //obj.put("stationId", stationId);
        obj.put("chargePerson",station.getChargePerson());
        String tel = "";
        Staff staff = staffService.getStructureByStationAndName(stationId, station.getChargePerson());
        if(staff != null){
        	tel = staff.getTel1();
        }
        obj.put("tel1",tel);
        SystemListInfo systems = systemService.getAllSystem(1, 100, null, null, null, stationId, null);
        List<SystemStaticData> datas = new ArrayList<>();
        List<TimeValue> heats = new ArrayList<>();
				for (int i = 0; i < 7; i++) {
					TimeValue time = new TimeValue();
					Double dou =Math.random()*20;
					time.setVal(new Double(200 +dou.intValue()*10/10).toString());
					time.setTime(DateUtil.toDateTimeString(new Date().getTime() - (6 - i) * 26 * 60 * 60 * 1000));
					heats.add(time);
				}
        for(SystemInfo info:systems.getSystemInfoList()){
        	SystemStaticData data = new SystemStaticData();
        	data.setSystemName(info.getSystemName());
        	data.setSystemId(info.getSystemId());
        	data.setHeats(heats);
        	datas.add(data);
        }
        obj.put("data", datas);
        return obj;
    }

    @ApiOperation(value = "根据id获取建筑物平衡阀运行值")
    @GetMapping("/getDataNowByBuildingNo")
    //@RequiresPermissions("")
    public Root getDataNowByBuildingId(@RequestParam String buildingNo){
        Root root = new Root();
        root.setData(distributionService.getBuildRunningDataByBuildId(buildingNo));
        return root;
    }

    @ApiOperation(value="获取地图线的列表")
    @GetMapping("/getMapLineList")
    public Root getMapLineList(@RequestParam("stationId") String stationId){
        Root root = new Root();
        root.setData(mapLineService.getAllMapLine(null,null,stationId,null,null,null,null,null).getMapLineInfoList());
        return root;
    }

    @ApiOperation(value="根据站id获取建筑物列表")
    @GetMapping("getBuildListByStationId")
    public Root getBuildListByStationId(@RequestParam("stationId")String stationId){
        Root root = new Root();
        root.setData(distributionService.getBuildListByStationId(stationId));
        return root;
    }
}
