package cn.plou.web.mobile.station.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

import cn.plou.web.common.constant.CKey;
import cn.plou.web.mobile.common.AppConstant;
import cn.plou.web.mobile.common.AppTools;
import cn.plou.web.mobile.station.query.AlarmsQuery;
import cn.plou.web.mobile.station.service.AlarmService;
import cn.plou.web.station.alarm.dao.AlarmInfoMapper;
import cn.plou.web.station.alarm.vo.AlarmInfoVo;
import cn.plou.web.station.alarm.vo.AlarmStatistics;
import cn.plou.web.system.commonMessage.typeMst.entity.TypeMst;
import cn.plou.web.system.commonMessage.typeMst.service.TypeMstService;
import cn.plou.web.system.permission.userLogin.dao.UserLoginMapper;
import cn.plou.web.system.permission.userLogin.entity.UserLogin;

/**
 * @Project : tg-webapp-server
 * @File : AlarmServiceImpl.java
 * @Author : WangJiWei
 * @Date : 2018年10月9日下午12:54:15
 *
 * @Comments : notes:报警的基于站id
 * 
 */
@Service
public class AlarmServiceImpl implements AlarmService {

    @Autowired
    AlarmInfoMapper alarmInfoMapper;

    @Override
    public Map<String, Object> findAlarmStatistics(List<String> systemIds) throws Exception {
	List<String> stationIds_ = systemIdToStationId(systemIds);

	/** 最新报警数量 */
	int latestAlarmCount = alarmInfoMapper.findLatestAlarmCount(stationIds_, null,
		AppConstant.ALARM_RESULT_0);
	String now = AppTools.curDateStr(CKey.YMD_);
	Date start = AppTools.formatDate(now + AppTools.TIME_LEFT, CKey.YMDHMS__);
	Date end = AppTools.formatDate(now + AppTools.TIME_RIGHT, CKey.YMDHMS__);
	/** 低值报警、高值报警、低低值报警、高高值报警 */
	List<AlarmStatistics> typeAlarmStat = alarmInfoMapper
		.findAlarmStatisticsGroupByType(stationIds_, start, end);
	List<TypeMst> typeMsts = typeMstService
		.getDownInfoByTypeKbns(Arrays.asList("station_alarm_type"));
	Map<String, TypeMst> typeMap = AppTools.listToMap(typeMsts, TypeMst::getTypeId, __ -> __);
	/** TODO 字典表获取typeName */
	typeAlarmStat.forEach(t -> {
	    t.setTypeName(typeMap.get(t.getType()).getTypeName());
	});
	/** 今日报警数 = 所有类型的报警和 */
	Integer todayStat = typeAlarmStat.stream()
		.collect(Collectors.summingInt(AlarmStatistics::getTotal));
	/** 今日已处理 */
	Integer todayFinish = alarmInfoMapper.getCountByResult(stationIds_, 1, start, end);
	/** 今日未处理 */
	Integer todayNoFinish = (todayStat != null && todayFinish != null)
		? (todayStat - todayFinish) : null;
	/** 正常报警、紧急报警 */ //
	List<AlarmStatistics> levelAlarmStat = alarmInfoMapper
		.findAlarmStatisticsGroupByLevel(stationIds_, start, end);
	Map<String, Object> result = Maps.newHashMap();
	result.put("newestAlarm", latestAlarmCount);// 最新报警
	result.put("todayAlarm", todayStat);// 今日报警
	result.put("finishAlarm", todayFinish);// 已处理
	result.put("noFinishAlarm", todayNoFinish);// 未处理
	result.put("type", typeAlarmStat);// 报警类型:{低值报警、高值报警、低低值报警、高高值报警}
	levelAlarmStat.forEach(_l -> { // level: normal=正常,exigency=紧急
	    result.put(_l.getType(), _l.getTotal());
	});
	return result;

    }

    @Autowired
    TypeMstService typeMstService;

    public List<TypeMst> getTypeMst(List<String> typeKbns) {
	List<TypeMst> typeMsts = typeMstService.getDownInfoByTypeKbns(typeKbns);
	return typeMsts;
    }

    /**
     * 报警、操作日志
     *
     */
    @Override
    public List<AlarmInfoVo> findAlarms(AlarmsQuery query) throws Exception {
	String alarmTime = query.getAlarmTime();
	if (StringUtils.isNotBlank(alarmTime)) {
	    query.setStartTime(AppTools.formatDate(alarmTime + AppTools.TIME_LEFT, CKey.YMDHMS__));
	    query.setEndTime(AppTools.formatDate(alarmTime + AppTools.TIME_RIGHT, CKey.YMDHMS__));
	}
	query.setStationIds(systemIdToStationId(query.getSystemIds()));
	return alarmInfoMapper.findAlarms(query);
    }
    
    @Autowired
    UserLoginMapper userLoginMapper;

    @Override
    public void verifyAlarm(String userId, List<String> alarmIds) {
	UserLogin user = userLoginMapper.selectByPrimaryKey(userId);
	alarmInfoMapper.updateAlarms(user.getUsername(), AppConstant.ALARM_RESULT_1, alarmIds);
    }

    @Override
    public Integer alarmCount(List<String> systemIds) {

	return alarmInfoMapper.findLatestAlarmCount(systemIdToStationId(systemIds), null, 0);
    }

    @Override
    public Integer alarmTotal(AlarmsQuery query) throws Exception {
	query.setStationIds(systemIdToStationId(query.getSystemIds()));
	return alarmInfoMapper.alarmTotal(query);
    }

    private List<String> systemIdToStationId(List<String> systemIds) {
	List<String> stationIds_ = systemIds.stream().map(c -> {
	    return c.substring(0, c.length() - 2);
	}).collect(Collectors.toList());
	return stationIds_;
    }

}
